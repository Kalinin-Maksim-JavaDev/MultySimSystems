annotation.processing.enabled=true
annotation.processing.enabled.in.editor=false
annotation.processing.run.all.processors=true
annotation.processing.source.output=${build.generated.sources.dir}/ap-source-output
application.title=Application
application.vendor=kalinin
build.classes.dir=${build.dir}/classes
build.classes.excludes=**/*.java,**/*.form
# This directory is removed when the project is cleaned:
build.dir=build
build.generated.dir=${build.dir}/generated
build.generated.sources.dir=${build.dir}/generated-sources
# Only compile against the classpath explicitly listed here:
build.sysclasspath=ignore
build.test.classes.dir=${build.dir}/test/classes
build.test.results.dir=${build.dir}/test/results
# Uncomment to specify the preferred debugger connection transport:
#debug.transport=dt_socket
debug.classpath=\
    ${run.classpath}
debug.test.classpath=\
    ${run.test.classpath}
# This directory is removed when the project is cleaned:
dist.dir=dist
dist.jar=${dist.dir}/Application.jar
dist.javadoc.dir=${dist.dir}/javadoc
endorsed.classpath=
excludes=
file.reference.Abstraction.jar=..\\Abstraction\\dist\\Abstraction.jar
file.reference.Collaborations.MVC.jar=..\\Collaborations\\MVC\\dist\\Collaborations.MVC.jar
file.reference.Domains.jar=../Domains/dist/Domains.jar
file.reference.Implementation.CollisionsMap.jar=../Implementation/CollisionsMap/dist/Implementation.CollisionsMap.jar
file.reference.Implementation.Common.jar=../Implementation/Common/dist/Implementation.Common.jar
file.reference.Implementation.Control.jar=..\\Implementation\\Control\\dist\\Implementation.Control.jar
file.reference.Implementation.Fabrics.jar=..\\Implementation\\Fabrics\\dist\\Implementation.Fabrics.jar
file.reference.Implementation.Model.Geometry.jar=..\\Implementation\\Model\\Geometry\\dist\\Implementation.Model.Geometry.jar
file.reference.Implementation.PathFinding.jar=..\\Implementation\\Model\\PathFinding\\dist\\Implementation.PathFinding.jar
file.reference.Implementation.Platform.Concurent.Fabrics.jar=../Implementation/Concurent/Fabrics/dist/Implementation.Platform.Concurent.Fabrics.jar
file.reference.Implementation.Platform.Concurent.jar=..\\Implementation\\Concurent\\Concurent\\dist\\Implementation.Platform.Concurent.jar
file.reference.Implementation.Platform.jar=..\\Implementation\\Platform\\dist\\Implementation.Platform.jar
file.reference.Implementation.Presenter.Graphic.jar=../Implementation/Presenter/Graphics/dist/Implementation.Presenter.Graphic.jar
file.reference.Implementation.Presenter.jar=..\\Implementation\\Presenter\\Projection\\dist\\Implementation.Presenter.jar
file.reference.Implementation.Scenarios.jar=..\\Implementation\\Scenarios\\Implementation.Scenarios\\dist\\Implementation.Scenarios.jar
file.reference.Implementation.Scenarios.Jumper.jar=..\\Implementation\\Model\\Scenarios\\Junper\\Implementation.Scenarios.Jumper\\dist\\Implementation.Scenarios.Jumper.jar
file.reference.pphys2d_ext.jar=../pphys2d_ext/dist/pphys2d_ext.jar
file.reference.Res.jar=../../../Res/dist/Res.jar
file.reference.Res.jar-1=..\\Res\\dist\\Res.jar
file.reference.Tetris.jar=../../../LevelOne/Models/Tetris/dist/Tetris.jar
file.reference.Tools.jar=..\\Global\\Tools\\dist\\Tools.jar
includes=**
jar.archive.disabled=${jnlp.enabled}
jar.compress=false
jar.index=${jnlp.enabled}
javac.classpath=\
    ${file.reference.Res.jar-1}:\
    ${file.reference.Domains.jar}:\
    ${file.reference.pphys2d_ext.jar}:\
    ${libs.pphys2d.classpath}:\
    ${libs.Jung.classpath}:\
    ${file.reference.Implementation.Common.jar}:\
    ${file.reference.Implementation.CollisionsMap.jar}:\
    ${file.reference.Implementation.Platform.jar}:\
    ${file.reference.Implementation.Platform.Concurent.Fabrics.jar}:\
    ${file.reference.Abstraction.jar}:\
    ${file.reference.Implementation.Platform.Concurent.jar}:\
    ${file.reference.Implementation.Fabrics.jar}:\
    ${file.reference.Implementation.Presenter.Graphic.jar}:\
    ${file.reference.Implementation.Model.Geometry.jar}:\
    ${file.reference.Implementation.Presenter.jar}:\
    ${file.reference.Implementation.PathFinding.jar}:\
    ${file.reference.Implementation.Scenarios.jar}:\
    ${file.reference.Implementation.Scenarios.Jumper.jar}:\
    ${file.reference.Collaborations.MVC.jar}:\
    ${file.reference.Tools.jar}:\
    ${file.reference.Implementation.Control.jar}
# Space-separated list of extra javac options
javac.compilerargs=
javac.deprecation=false
javac.processorpath=\
    ${javac.classpath}
javac.source=1.5
javac.target=1.5
javac.test.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}:\
    ${libs.junit.classpath}:\
    ${libs.junit_4.classpath}
javac.test.processorpath=\
    ${javac.test.classpath}
javadoc.additionalparam=
javadoc.author=false
javadoc.encoding=${source.encoding}
javadoc.noindex=false
javadoc.nonavbar=false
javadoc.notree=false
javadoc.private=false
javadoc.splitindex=true
javadoc.use=true
javadoc.version=false
javadoc.windowtitle=
jnlp.codebase.type=no.codebase
jnlp.descriptor=application
jnlp.enabled=false
jnlp.mixed.code=defaut
jnlp.offline-allowed=false
jnlp.signed=false
main.class=Main.Main
manifest.file=manifest.mf
meta.inf.dir=${src.dir}/META-INF
platform.active=default_platform
run.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}
# Space-separated list of JVM arguments used when running the project
# (you may also define separate properties like run-sys-prop.name=value instead of -Dname=value
# or test-sys-prop.name=value to set system properties for unit tests):
run.jvmargs=-Djava.security.policy=applet.policy
run.test.classpath=\
    ${javac.test.classpath}:\
    ${build.test.classes.dir}
source.encoding=windows-1251
src.dir=src
test.src.dir=test
